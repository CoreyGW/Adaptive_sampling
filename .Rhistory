as.data.frame() # into dataframe
temp<-sample_tiles %>% # add new rows to the dataframe
bind_rows(neighbours)%>%
unique()
while(sum(temp!=sample_tiles)){ # keep growing the clusters till the end
}
return(list(sample_tiles,occupied))
}
mysamp<-simulate_one()
sample_tiles
points
apply(sample_tiles,1,function(x) is_occupied(x,points))
plot_clusters(points)
plot_clusters<-function(cluster_df, grid_size=20,samp=NULL){
# create a plot of the clusters
p<-ggplot(cluster_df, aes(x=X1, y=X2, color=Group))+
geom_point()+
scale_x_continuous(breaks=seq(grid_size))+
scale_y_continuous(breaks=seq(grid_size))+
coord_cartesian(xlim=c(0,grid_size), ylim=c(0,grid_size))
if(!is.null(samp)){
p<-p+geom_rect(data=samp,
aes(x=V1, y=V2, xmin=V1-1, xmax=V1, ymin=V2-1, ymax=V2))
}
p
}
mysamp<-simulate_one()
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
plot_clusters(points,samp=sample_tiles)
plot_clusters<-function(cluster_df, grid_size=20,samp=NULL){
# create a plot of the clusters
p<-ggplot(cluster_df, aes(x=X1, y=X2, color=Group))+
geom_point()+
scale_x_continuous(breaks=seq(grid_size))+
scale_y_continuous(breaks=seq(grid_size))+
coord_cartesian(xlim=c(0,grid_size), ylim=c(0,grid_size))
if(!is.null(samp)){
p<-p+geom_rect(data=samp,
aes(x=V1, y=V2, xmin=V1-1, xmax=V1, ymin=V2-1, ymax=V2),
color="black")
}
p
}
plot_clusters(points,samp=sample_tiles)
plot_clusters<-function(cluster_df, grid_size=20,samp=NULL){
# create a plot of the clusters
p<-ggplot(cluster_df, aes(x=X1, y=X2, color=Group))+
geom_point()+
scale_x_continuous(breaks=seq(grid_size))+
scale_y_continuous(breaks=seq(grid_size))+
coord_cartesian(xlim=c(0,grid_size), ylim=c(0,grid_size))
if(!is.null(samp)){
p<-p+geom_rect(data=samp,
aes(x=V1, y=V2, xmin=V1-1, xmax=V1, ymin=V2-1, ymax=V2),
color="black",
fill=NA)
}
p
}
plot_clusters(points,samp=sample_tiles)
plot_clusters<-function(cluster_df, grid_size=20,samp=NULL){
# create a plot of the clusters
p<-ggplot(cluster_df, aes(x=X1, y=X2, color=Group))+
geom_point()+
scale_x_continuous(breaks=seq(grid_size))+
scale_y_continuous(breaks=seq(grid_size))+
coord_cartesian(xlim=c(0,grid_size), ylim=c(0,grid_size))
if(!is.null(samp)){
p<-p+geom_rect(data=samp,
aes(xmin=V1-1, xmax=V1, ymin=V2-1, ymax=V2),
color="black",
fill=NA)
}
p
}
plot_clusters(points,samp=sample_tiles)
plot_clusters<-function(cluster_df, grid_size=20,samp=NULL){
# create a plot of the clusters
p<-ggplot(cluster_df, aes(x=X1, y=X2, color=Group))+
geom_point()+
scale_x_continuous(breaks=seq(grid_size))+
scale_y_continuous(breaks=seq(grid_size))+
coord_cartesian(xlim=c(0,grid_size), ylim=c(0,grid_size))
if(!is.null(samp)){
p<-p+geom_rect(data=samp,
aes(x=V1, y=V2, xmin=V1-1, xmax=V1, ymin=V2-1, ymax=V2),
color="black",
fill=NA)
}
p
}
plot_clusters(points,samp=sample_tiles)
# create clusters
points<-make_clusters()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,function(x) is_occupied(x,points))
sample_tiles[occupied,]
occupied
sample_tiles
occupied<-apply(sample_tiles,1,is_occupied, df=points)
occupied
sample_tiles
points
plot_clusters(points,samp=sample_tiles)
is_occupied(sample_tiles[1,],points)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
mysamp<-simulate_one()
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
apply(sample_tiles,1,is_occupied, df=points)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,is_occupied, df=points)
apply(sample_tiles,1,is_occupied, df=points)
sample_tiles
set.seed(30)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,is_occupied, df=points)
apply(sample_tiles,1,is_occupied, df=points)
sample_tiles
names(sample_tiles)
is_occupied(sample_tiles[1,],points)
is_occupied(sample_tiles[2,],points)
is_occupied(sample_tiles,points)
is_occupied(sample_tiles[1,],points)
points
class(sample_tiles[1,])
set.seed(30)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,is_occupied, df=points)
apply(sample_tiles,1,is_occupied, df=points)
is_occupied(sample_tiles[1,],points)
is_occupied(sample_tiles[2,],points)
is_occupied(sample_tiles[3,],points)
is_occupied(sample_tiles[4,],points)
is_occupied(sample_tiles[5,],points)
is_occupied(sample_tiles[6,],points)
is_occupied(sample_tiles[7,],points)
is_occupied(sample_tiles[8,],points)
set.seed(30)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,is_occupied, df=points)
apply(sample_tiles,1,is_occupied, df=points)
is_occupied(sample_tiles[1,],points)
is_occupied(sample_tiles[2,],points)
is_occupied(sample_tiles[3,],points)
is_occupied(sample_tiles[4,],points)
is_occupied(sample_tiles[5,],points)
is_occupied(sample_tiles[6,],points)
is_occupied(sample_tiles[7,],points)
is_occupied(sample_tiles[8,],points)
sample_tiles
is_occupied(sample_tiles[7,],points)
set.seed(30)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,is_occupied, df=points)
apply(sample_tiles,1,is_occupied, df=points)
is_occupied(sample_tiles[1,],points)
is_occupied(sample_tiles[2,],points)
is_occupied(sample_tiles[3,],points)
is_occupied(sample_tiles[4,],points)
is_occupied(sample_tiles[5,],points)
is_occupied(sample_tiles[6,],points)
is_occupied(sample_tiles[7,],points)
is_occupied(sample_tiles[8,],points)
set.seed(30)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,is_occupied, df=points)
apply(sample_tiles,1,is_occupied, df=points)
is_occupied(sample_tiles[1,],points)
is_occupied(sample_tiles[2,],points)
is_occupied(sample_tiles[3,],points)
is_occupied(sample_tiles[4,],points)
is_occupied(sample_tiles[5,],points)
is_occupied(sample_tiles[6,],points)
is_occupied(sample_tiles[7,],points)
is_occupied(sample_tiles[8,],points)
is_occupied(sample_tiles[9,],points)
is_occupied(sample_tiles[10,],points)
sample_tiles[7,]
is_occupied
is_occupied<-function(tile=c(1,1),df){
# check if a tile is occupied tile location is given as c(row,column)
# give a dataframe with coordinates of point
# check if there are any points in xrange & yrange at the same time
sum((df[,1]<tile[2] & df[,1]>tile[2]-1) * (df[,1]<tile[2] & df[,1]>tile[2]-1))>0
}
set.seed(30)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,is_occupied, df=points)
apply(sample_tiles,1,is_occupied, df=points)
is_occupied(sample_tiles[1,],points)
is_occupied(sample_tiles[2,],points)
is_occupied(sample_tiles[3,],points)
is_occupied(sample_tiles[4,],points)
is_occupied(sample_tiles[5,],points)
is_occupied(sample_tiles[6,],points)
is_occupied(sample_tiles[7,],points)
is_occupied(sample_tiles[8,],points)
is_occupied(sample_tiles[9,],points)
is_occupied(sample_tiles[10,],points)
is_occupied
plot(points,X2~X1)
plot(data=points,X2~X1)
sample_points
sample_tiles
points[,1]<3
points[,1]<3&points[,1]>4
points[,1]<3&points[,1]>2
points[,1]
cbind(points[,1],points[,1]<3&points[,1]>2)
points[(points[,7]<3&points[,1]>6) & (point[,2]<3 & points[,2]>2)
]
points[(points[,7]<3&points[,1]>6) & (point[,2]<3 & points[,2]>2),]
points[(points[,1]<7&points[,1]>6) & (point[,2]<3 & points[,2]>2),]
points[(points[,1]<7&points[,1]>6) & (points[,2]<3 & points[,2]>2),]
points[(points[,1]<7&points[,1]>6) & (points[,2]<3 & points[,2]>2),]
plot_clusters(points,samp=sample_tiles)
plot_clusters(points,samp=sample_tiles)
points[(points[,1]<7&points[,1]>6) & (points[,2]<2 & points[,2]>1),]
sum((points[,1]<7&points[,1]>6) & (points[,2]<2 & points[,2]>1))
is_occupied<-function(tile=c(1,1),df){
# check if a tile is occupied tile location is given as c(row,column)
# give a dataframe with coordinates of point
# check if there are any points in xrange & yrange at the same time
#sum((df[,1]<tile[2] & df[,1]>tile[2]-1) * (df[,1]<tile[2] & df[,1]>tile[2]-1))>0
sum((points[,1]<7&points[,1]>6) & (points[,2]<2 & points[,2]>1))>0
}
set.seed(30)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,is_occupied, df=points)
apply(sample_tiles,1,is_occupied, df=points)
is_occupied(sample_tiles[1,],points)
is_occupied(sample_tiles[2,],points)
is_occupied(sample_tiles[3,],points)
is_occupied(sample_tiles[4,],points)
is_occupied(sample_tiles[5,],points)
is_occupied(sample_tiles[6,],points)
is_occupied(sample_tiles[7,],points)
is_occupied(sample_tiles[8,],points)
is_occupied(sample_tiles[9,],points)
is_occupied(sample_tiles[10,],points)
new_is_occupied(tile,df){
is_occupied(sample_tiles[10,],points)
is_occupied(sample_tiles[1,],points)
is_occupied(sample_tiles[2,],points)
is_occupied(sample_tiles[3,],points)
is_occupied(sample_tiles[4,],points)
is_occupied(sample_tiles[5,],points)
is_occupied(sample_tiles[6,],points)
is_occupied(sample_tiles[7,],points)
is_occupied(sample_tiles[8,],points)
is_occupied(sample_tiles[9,],points)
is_occupied(sample_tiles[10,],points)
is_occupied<-function(tile=c(1,1),df){
# check if a tile is occupied tile location is given as c(row,column)
# give a dataframe with coordinates of point
# check if there are any points in xrange & yrange at the same time
#sum((df[,1]<tile[2] & df[,1]>tile[2]-1) * (df[,1]<tile[2] & df[,1]>tile[2]-1))>0
sum((points[,1]<tile[1]&points[,1]>tile[1]-1) & (points[,2]<tile[2] & points[,2]>tile[2]-1))>0
}
set.seed(30)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
occupied<-apply(sample_tiles,1,is_occupied, df=points)
apply(sample_tiles,1,is_occupied, df=points)
is_occupied(sample_tiles[1,],points)
is_occupied(sample_tiles[2,],points)
is_occupied(sample_tiles[3,],points)
is_occupied(sample_tiles[4,],points)
is_occupied(sample_tiles[5,],points)
is_occupied(sample_tiles[6,],points)
is_occupied(sample_tiles[7,],points)
is_occupied(sample_tiles[8,],points)
is_occupied(sample_tiles[9,],points)
is_occupied(sample_tiles[10,],points)
points[sum((points[,1]<7&points[,1]>6) & (points[,2]<2 & points[,2]>1)),]
is_occupied(sample_tiles[5,],points)
apply(sample_tiles,1,is_occupied, df=points)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
cbind(sample_tiles,apply(sample_tiles,1,is_occupied, df=points))
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
cbind(sample_tiles,apply(sample_tiles,1,is_occupied, df=points))
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
cbind(sample_tiles,apply(sample_tiles,1,is_occupied, df=points))
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
cbind(sample_tiles,apply(sample_tiles,1,is_occupied, df=points))
is_occupied(sample_tiles[2,],points)
grid_size<-20
nclusters<-3
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
cbind(sample_tiles,apply(sample_tiles,1,is_occupied, df=points))
getwd()
require(tidyverse)
require(tidyverse)
make_clusters<-function(grid_size=20, nclusters=3, avg_size=20){
# create a list of clusters.
centers<-split(runif(nclusters*2,0,grid_size),seq(nclusters))
# get the three cluster sizes
sizes<-rpois(3,avg_size)
# get list of matrices of the centers
center_dfs<-map2(sizes,centers,
~ kronecker(matrix(rep(1,.x),ncol=1), matrix(.y,ncol=2)))
# I actually used the kronecker product holy crap!
# get coordinates of locations
locations<-sizes %>% # use sizes
map(~data.frame(matrix(rnorm(.x*2),ncol=2))) %>% # make list of df of changes from centers
map2(.y=center_dfs,~.x+.y) %>% # add the changes on to the center
map2(.y=seq(nclusters), ~ mutate(.x, Group=paste("Cluster",.y)))%>%
bind_rows()
}
plot_clusters<-function(cluster_df, grid_size=20,samp=NULL){
# create a plot of the clusters
p<-ggplot(cluster_df, aes(x=X1, y=X2, color=Group))+
geom_point()+
scale_x_continuous(breaks=seq(grid_size))+
scale_y_continuous(breaks=seq(grid_size))+
coord_cartesian(xlim=c(0,grid_size), ylim=c(0,grid_size))
if(!is.null(samp)){
p<-p+geom_rect(data=samp,
aes(x=V1, y=V2, xmin=V1-1, xmax=V1, ymin=V2-1, ymax=V2),
color="black",
fill=NA)
}
p
}
is_occupied<-function(tile=c(1,1),df){
# check if a tile is occupied tile location is given as c(row,column)
# give a dataframe with coordinates of point
# check if there are any points in xrange & yrange at the same time
#sum((df[,1]<tile[2] & df[,1]>tile[2]-1) * (df[,1]<tile[2] & df[,1]>tile[2]-1))>0
sum((points[,1]<tile[1]&points[,1]>tile[1]-1) & (points[,2]<tile[2] & points[,2]>tile[2]-1))>0
}
get_neighbours<- function(tile=c(1,1), hard_border=TRUE,gridsize=20){
# gets a list of neighbouring tiles
neighbours<-list(c(tile[1]-1,tile[2]),
c(tile[1],tile[2]-1),
c(tile[1]+1,tile[2]),
c(tile[1],tile[2]+1))
if(hard_border){
# do we want to include neighbours outside of the grid?
# returns the neighbours that are only within the border
neighbours<-neighbours[map_lgl(neighbours, ~prod(c(.x>0,.x<=grid_size)))]
}
neighbours
}
simulate_one<-function(n1=10,nclusters=3, grid_size=20,... ){
# generate clusters
points<-make_clusters()
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x,points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles, 1, get_neighbours)%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
temp<-sample_tiles %>% # add new rows to the dataframe
bind_rows(neighbours)%>%
unique()
while(sum(temp!=sample_tiles)){ # keep growing the clusters till the end
}
return(list(sample_tiles,occupied))
}
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
mysamp<-simulate_one()
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
