return(list(sample_tiles=cbind(sample_tiles,occupied),points=points))
}
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
grid_size<-20
nclusters<-3
n1<-10
# create clusters
points<-make_clusters()
# plot them
plot_clusters(points)
# choose the starting grid cells
sample_tiles<-matrix(sample(1:grid_size,n1*2),ncol=2)%>%
as.data.frame()
plot_clusters(points,samp=sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
get_tiles()
ex_tiles<-get_tiles()
get_neighbours<- function(tile=c(X=1,Y=1,k=1), hard_border=TRUE,grid_size=20){
# gets a list of neighbouring tiles
neighbours<-list(c(tile[1]-1, tile[2],   tile[3]),
c(tile[1],   tile[2]-1, tile[3]),
c(tile[1]+1, tile[2],   tile[3]),
c(tile[1],   tile[2]+1, tile[3]))
if(hard_border){
# do we want to include neighbours outside of the grid?
# returns the neighbours that are only within the border
neighbours<-neighbours[map_lgl(neighbours, ~prod(c(.x>0,.x<=grid_size)))]
}
# returns list of neighbours for a given tile
neighbours
}
get_neighbours(ex_tiles)
neighbours<-apply(ex_tiles[occupied,], 1, get_neighbours)%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame()
neighbours<-apply(ex_tiles, 1, get_neighbours)%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame()
neighbours
# generate clusters
points<-make_clusters()
# choose the starting grid cells
sample_tiles<-get_tiles(...)
sample_tiles<-get_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x,points))
is_occupied<-function(tile=c(1,1,1),df){
# check if a tile is occupied tile location is given as c(row,column)
# give a dataframe with coordinates of point
# check if there are any points in xrange & yrange at the same time
#sum((df[,1]<tile[2] & df[,1]>tile[2]-1) * (df[,1]<tile[2] & df[,1]>tile[2]-1))>0
sum((df[,1]<tile[1]&df[,1]>tile[1]-1) & (df[,2]<tile[2] & df[,2]>tile[2]-1))>0
}
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x, points))
sample_tiles
# choose the starting grid cells
sample_tiles<-get_tiles(...)
sample_tiles<-get_tiles()
sample_tiles
# save a copy to check against for updates
temp<-sample_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x, points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, get_neighbours)%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
occupied
neighbours
plot_clusters(points,sample_tiles)
plot_clusters(points,sample_tiles[,1:2])
points
sample_tiles
get_tiles<-function(grid_size=20,n1=10,...){
# this function returns a sample of n1 tiles using a square grid_size grid
# get a tile
tiles<-sample(1:grid_size^2,n1,...)
# convert tile numbers into X and Y
samp<-data.frame(X=tiles%%grid_size, Y=(tiles-1)%/%grid_size+1)
samp$X[samp$X==0]<-grid_size
samp$k<-1:n1
samp
}
sample_tiles<-get_tiles
sample_tiles<-get_tiles()
sample_tiles
# save a copy to check against for updates
temp<-sample_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x, points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, get_neighbours)%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
neighbours
set.seed(pi)
grid_size<-20
nclusters<-3
n1<-10
# create clusters
points<-make_clusters()
sample_tiles<-get_tiles()
# save a copy to check against for updates
temp<-sample_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x, points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, get_neighbours)%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
neighbours
# update sample tiles to include neighbours
sample_tiles<-rbind(sample_tiles,neighbours) %>%
unique()
# plot them
plot_clusters(points,sample_tiles)
# plot them
plot_clusters(points,samp=sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one$sample_tiles
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one$sample_tiles
tile_average<-function(tile=c(X=1,Y=1,K=1), df){
# basically just a reskin of is occupied fucntion
# tile is the tile to find the mean of
# df is the dataframe of points on the grid
mean((df[,1]<tile[1]&df[,1]>tile[1]-1) & (df[,2]<tile[2] & df[,2]>tile[2]-1))
}
tile_mean<-function(tile=c(X=1,Y=1,K=1), df){
# basically just a reskin of is occupied fucntion
# tile is the tile to find the mean of
# df is the dataframe of points on the grid
mean((df[,1]<tile[1]&df[,1]>tile[1]-1) & (df[,2]<tile[2] & df[,2]>tile[2]-1))
}
# check whether or not they are occupied based on the clusters
means<-apply(sample_tiles,1,function(x) tile_mean(x, points))
means
sample_tiles
occupied
tile_sum<-function(tile=c(X=1,Y=1,K=1), df){
# basically just a reskin of is occupied fucntion
# tile is the tile to find the mean of
# df is the dataframe of points on the grid
sum((df[,1]<tile[1]&df[,1]>tile[1]-1) & (df[,2]<tile[2] & df[,2]>tile[2]-1))
}
# check whether or not they are occupied based on the clusters
sums<-apply(sample_tiles,1,function(x) tile_sum(x, points))
sums
# plot them
plot_clusters(points,samp=sample_tiles)
set.seed(pi)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
modified_HH<-function(one_samp){
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
means<-cbind(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
}
modified_HH(sample_one)
one_samp<-simulate_one(n1=10,nclusters=3, grid_size=20)
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
sums
one_samp
set.seed(pi)
one_samp<-simulate_one(n1=10,nclusters=3, grid_size=20)
one_sampe
one_samp
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
sums
cbind(sums,group=one_samp$sample_tiles$k)
means<-cbind(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-cbind(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)
means<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means
means[,1]
means[,2]
modified_HH<-function(seed,plot=F,grid_size=20,...){
# Find the hansen hurwitz estimator of a sample
set.seed(seed)
one_samp<-simulate_one(n1=10,nclusters=3, grid_size=20)
if(plot=T){
modified_HH<-function(seed,plot=F,grid_size=20,...){
# Find the hansen hurwitz estimator of a sample
set.seed(seed)
one_samp<-simulate_one(n1=10,nclusters=3, grid_size=20)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:grid_size,network_means=rep(0,grid_size))
means[temp[,1],]<-temp[,2]
means
}
modified_HH()
modified_HH<-function(seed=pi,plot=F,grid_size=20,...){
# Find the hansen hurwitz estimator of a sample
set.seed(seed)
one_samp<-simulate_one(n1=10,nclusters=3, grid_size=20)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:grid_size,network_means=rep(0,grid_size))
means[temp[,1],]<-temp[,2]
means
}
modified_HH()
# Find the hansen hurwitz estimator of a sample
set.seed(seed)
seed<-pi
# Find the hansen hurwitz estimator of a sample
set.seed(seed)
one_samp<-simulate_one(n1=10,nclusters=3, grid_size=20)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
temp
temp$gropu
temp$group
means<-data.frame(init_sample=1:grid_size,network_means=rep(0,grid_size))
means
modified_HH<-function(seed=pi,plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
set.seed(seed)
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,]<-temp$network_means
means
}
modified_HH()
modified_HH<-function(seed=pi,plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
set.seed(seed)
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,2]<-temp$network_means
means
}
modified_HH()
modified_HH(plot=T)
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
modified_HH<-function(seed=pi,plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
set.seed(seed)
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,2]<-temp$network_means
means
}
modified_HH(plot=T)
plot_clusters<-function(cluster_df, grid_size=20,samp=NULL){
# cluster_df is the set of points on the grid
# samp is the set of tiles that were sampled
# create a plot of the clusters
p<-ggplot(cluster_df, aes(x=X1, y=X2, color=Group))+
geom_point()+
scale_x_continuous(breaks=seq(grid_size))+
scale_y_continuous(breaks=seq(grid_size))+
coord_cartesian(xlim=c(0,grid_size), ylim=c(0,grid_size))+
coord_equal()
if(!is.null(samp)){
# this will highlight tiles that are sampled
# samp is the dataframe containing the coordinates for tiles
p<-p+geom_rect(data=samp,
aes(x=X, y=Y, xmin=X-1, xmax=X, ymin=Y-1, ymax=Y),
color="black",
fill=NA)
}
plot(p)
}
modified_HH<-function(seed=pi,plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
set.seed(seed)
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,2]<-temp$network_means
means
}
modified_HH(plot=T)
modified_HH<-function(plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,2]<-temp$network_means
means
}
modified_HH(plot=T)
modified_HH<-function(plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,2]<-temp$network_means
means
}
modified_HH(plot=T)
modified_HH<-function(plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,2]<-temp$network_means
means
}
modified_HH(plot=T)
modified_HH<-function(plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,2]<-temp$network_means
means
}
modified_HH(plot=T)
modified_HH<-function(plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,2]<-temp$network_means
means
}
modified_HH(plot=T)
modified_HH<-function(plot=F,n1=10,...){
# Find the hansen hurwitz estimator of a sample
one_samp<-simulate_one(n1=n1,...)
if(plot==T){
plot_clusters(one_samp$points,samp=one_samp$sample_tiles)
}
# sample_one$points and sample_one$sample_tiles
sums<-apply(one_samp$sample_tiles,1,function(x) tile_sum(x, one_samp$points))
temp<-data.frame(sums,group=one_samp$sample_tiles$k) %>%
group_by(group)%>%
filter(sums>0) %>%
summarize(network_means=mean(sums))
means<-data.frame(init_sample=1:n1,network_means=rep(0,n1))
means[temp$group,2]<-temp$network_means
mean(means$network_means)
}
modified_HH(plot=T)
modified_HH()
modified_HH()
## Hovritz-Thompson
modified_HH()
modified_HH()
modified_HH()
modified_HH()
modified_HH()
modified_HH()
modified_HH()
modified_HH()
modified_HH()
modified_HH()
Ap<-matrix(c(1,-1,0,0,0,0,
0,1,-1,0,0,0,
0,0,1,-1,0,0,
0,0,0,1,-1,0,
0,0,0,0,1,-1),byrow = T,ncol=6)
X<-matrix(rep(1,6),ncol=1)
Ap%*%X
Ap<-matrix(c(1,-1,0,0,0,0,
0,1,-1,0,0,0,
0,0,1,-1,0,0,
0,0,0,1,-1,0,
0,0,0,0,1,-1),byrow = T,ncol=6)
X<-matrix(rep(1,6),ncol=1)
Ap%*%X
Ap%*%t(Ap)
Ap<-matrix(c(1,-1,0,0,0,0,
0,1,-1,0,0,0,
0,0,1,-1,0,0,
0,0,0,1,-1,0,
0,0,0,0,1,-1,
-1,0,0,0,0,1),byrow = T,ncol=6)
X<-matrix(rep(1,6),ncol=1)
Ap%*%X
Ap%*%t(Ap)
