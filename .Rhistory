occupied<-apply(sample_tiles,1,function(x) is_occupied(x, points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, function(x) get_neighbours(x,hard_border = TRUE))%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
# update sample tiles to include neighbours
sample_tiles<-rbind(sample_tiles,neighbours) %>%
unique()
# keep looping until sample_tiles does not grow
while(dim(temp)[1]!=dim(sample_tiles)[1]){
# save a copy to check against for updates
temp<-sample_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x,points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, function(x) get_neighbours(x,hard_border = TRUE))%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
# update sample tiles to include neighbours
sample_tiles<-sample_tiles %>%
bind_rows(neighbours) %>%
unique()
}
# get the values of the response for each unit in the sample
sample_tiles$y_k<-apply(sample_tiles,1,function(x) tile_sum(x, points))
# get the number of units in each network m_k and add occupied to sample_tiles
sample_tiles<-sample_tiles%>%
cbind(occupied)%>%
group_by(k)%>%
mutate(m_k=sum(occupied))
# minimum for m_k is 1 not 0, set all 0s to 1
sample_tiles$m_k[sample_tiles$m_k==0]<-1
return(list(sample_tiles=sample_tiles,
points=points,
nclusters=nclusters,
grid_size=grid_size,
n1=n1))
}
set.seed(pi)
sim_data<-simulate_one()
simulate_one<-function(nclusters=3, grid_size=20,n1=10,force_inclusion=FALSE, hard_border=TRUE,... ){
# generate clusters
points<-make_clusters(force_inclusion = force_inclusion)
# choose the starting grid cells
sample_tiles<-get_tiles(n1=10,...)
# save a copy to check against for updates
temp<-sample_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x, points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, function(x) get_neighbours(x,hard_border = TRUE))%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
# update sample tiles to include neighbours
sample_tiles<-rbind(sample_tiles,neighbours) %>%
unique()
# keep looping until sample_tiles does not grow
while(dim(temp)[1]!=dim(sample_tiles)[1]){
# save a copy to check against for updates
temp<-sample_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x,points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, function(x) get_neighbours(x,hard_border = TRUE))%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
# update sample tiles to include neighbours
sample_tiles<-sample_tiles %>%
bind_rows(neighbours) %>%
unique()
}
# get the values of the response for each unit in the sample
sample_tiles$y_k<-apply(sample_tiles,1,function(x) tile_sum(x, points))
# get the number of units in each network m_k and add occupied to sample_tiles
sample_tiles<-sample_tiles%>%
cbind(occupied)%>%
group_by(k)%>%
mutate(m_k=sum(occupied))
# minimum for m_k is 1 not 0, set all 0s to 1
sample_tiles$m_k[sample_tiles$m_k==0]<-1
return(list(sample_tiles=sample_tiles,
points=points,
nclusters=nclusters,
grid_size=grid_size,
n1=n1))
}
set.seed(pi)
sim_data<-simulate_one()
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
set.seed(pi)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
make_clusters(force_inclusion = TRUE)
make_clusters<-function(grid_size=20, nclusters=3, avg_size=20, force_inclusion=FALSE){
# create a list of clusters.
centers<-split(runif(nclusters*2,0,grid_size),seq(nclusters))
# get the three cluster sizes
sizes<-rpois(3,avg_size)
# get list of matrices of the centers
center_dfs<-map2(sizes,centers,
~ kronecker(matrix(rep(1,.x),ncol=1), matrix(.y,ncol=2)))
# I actually used the kronecker product holy crap!
if(force_inclusion==T){
# get coordinates of locations
locations<-sizes %>% # use sizes
map( ~data.frame(matrix(rnorm(.x*2),ncol=2))) %>% # make list of df of changes from centers
map2(.y=center_dfs, ~.x+.y) %>% # add the changes on to the center
map2(.y=seq(nclusters), ~ mutate(.x, Group=paste("Cluster",.y)))%>%
bind_rows()
colnames(locations)<-c("X","Y","Group")
# force points to snap inside if they were generated outside. This means some
# tiles will be more densely clustered at edges when a center is near an edge
# should help maintain the average number of points though
locations<-locations%>%
mutate(X=ifelse(X>grid_size,grid_size,X))%>%
mutate(X=ifelse(X<0, 0, X))%>%
mutate(Y=ifelse(Y>grid_size,grid_size,Y))%>%
mutate(Y=ifelse(Y<0, 0, Y))
}else{
# get coordinates of locations
locations<-sizes %>% # use sizes
map(~data.frame(matrix(rnorm(.x*2),ncol=2))) %>% # make list of df of changes from centers
map2(.y=center_dfs,~.x+.y) %>% # add the changes on to the center
map2(.y=seq(nclusters), ~ mutate(.x, Group=paste("Cluster",.y)))%>%
bind_rows()
colnames(locations)<-c("X","Y","Group")
}
locations
}
make_clusters(force_inclusion = TRUE)
simulate_one<-function(nclusters=3, grid_size=20,n1=10,force_inclusion=FALSE, hard_border=TRUE,... ){
# generate clusters
points<-make_clusters(force_inclusion = force_inclusion)
# choose the starting grid cells
sample_tiles<-get_tiles(n1=10,...)
# save a copy to check against for updates
temp<-sample_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x, points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, function(x) get_neighbours(x,hard_border = TRUE))%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
# update sample tiles to include neighbours
sample_tiles<-rbind(sample_tiles,neighbours) %>%
unique()
# keep looping until sample_tiles does not grow
while(dim(temp)[1]!=dim(sample_tiles)[1]){
# save a copy to check against for updates
temp<-sample_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x,points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, function(x) get_neighbours(x,hard_border = TRUE))%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
# update sample tiles to include neighbours
sample_tiles<-sample_tiles %>%
bind_rows(neighbours) %>%
unique()
}
# get the values of the response for each unit in the sample
sample_tiles$y_k<-apply(sample_tiles,1,function(x) tile_sum(x, points))
# get the number of units in each network m_k and add occupied to sample_tiles
sample_tiles<-sample_tiles%>%
cbind(occupied)%>%
group_by(k)%>%
mutate(m_k=sum(occupied))
# minimum for m_k is 1 not 0, set all 0s to 1
sample_tiles$m_k[sample_tiles$m_k==0]<-1
return(list(sample_tiles=sample_tiles,
points=points,
nclusters=nclusters,
grid_size=grid_size,
n1=n1))
}
set.seed(pi)
sim_data<-simulate_one()
set.seed(pi)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
set.seed(pi)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
set.seed(pi)
sample_one<-simulate_one(n1=10,nclusters=3, grid_size=20,force_inclusion=TRUE)
plot_clusters(sample_one$points,samp=sample_one$sample_tiles)
# m numer of samples from the same population
simulate_m<-function(m=10,nclusters=3, grid_size=20,n1=10,force_inclusion=FALSE, hard_border=TRUE,...  ){
results<-list()
# generate clusters
points<-make_clusters(force_inclusion = force_inclusion)
for(i in 1:m){ # loop for the m samples
# this is just the code from simulate_one() see that for more comments
sample_tiles<-get_tiles(n1=10,...)
temp<-sample_tiles
occupied<-apply(sample_tiles,1,function(x) is_occupied(x,points))
neighbours<-apply(sample_tiles[occupied,], 1, function(x) get_neighbours(x,hard_border = hard_border))%>% # get neighbours
bind_rows() %>%
as.data.frame()
sample_tiles<-rbind(sample_tiles,neighbours) %>%
unique()
# keep looping until sample_tiles does not grow
while(dim(temp)[1]!=dim(sample_tiles)[1]){
# save a copy to check against for updates
temp<-sample_tiles
# check whether or not they are occupied based on the clusters
occupied<-apply(sample_tiles,1,function(x) is_occupied(x,points))
# find the neighbours of the occupied points
neighbours<-apply(sample_tiles[occupied,], 1, function(x)get_neighbours(x,hard_border = hard_border))%>% # get neighbours
bind_rows() %>% # turn list of neighbours into tibble
as.data.frame() # into dataframe
# update sample tiles to include neighbours
sample_tiles<-sample_tiles %>%
bind_rows(neighbours) %>%
unique()
}
# get the values of the response for each unit in the sample
sample_tiles$y_k<-apply(sample_tiles,1,function(x) tile_sum(x, points))
# get the number of units in each network m_k and add occupied to sample_tiles
sample_tiles<-sample_tiles%>%
cbind(occupied)%>%
group_by(k)%>%
mutate(m_k=sum(occupied))
# minimum for m_k is 1 not 0, set all 0s to 1
sample_tiles$m_k[sample_tiles$m_k==0]<-1
results[[i]]<-list(sample_tiles=sample_tiles,
points=points,
nclusters=nclusters,
grid_size=grid_size,
n1=n1)
}
return(results)
}
set.seed(pi)
sim_data_m<-simulate_m()
set.seed(pi)
n_samples<-10
n_pops<-9
results<-data.frame(HH=rep(NA,n_pops*n_samples),
TH=rep(NA,n_pops*n_samples),
Truth=rep(NA,n_pops*n_samples),
Population=rep(NA,n_pops*n_samples))
population_points<-data.frame(X=c(),Y=c(),Group=c(),Population=c())
for(i in 1:n_pops){
sim_data<-simulate_m(m=n_samples,hard_border = FALSE, force_inclusion = FALSE)
# save the population points to plot later
population_points<-population_points%>%
rbind( cbind(sim_data[[i]]$points,Population=paste("pop",i)) )
for(j in 1:n_samples){
results$HH[(i-1)*n_samples+j]<-modified_HH(sim_data[[j]])
results$TH[(i-1)*n_samples+j]<-modified_TH(sim_data[[j]])
results$Truth[(i-1)*n_samples+j]<-length(sim_data[[j]]$points$X)/(sim_data[[j]]$grid_size^2)
results$Population[(i-1)*n_samples+j]<-paste("Population",i)
}
}
population_points
write.csv(results,file="estimates-inclusion_not_forced-soft_border.csv.csv")
write.csv(population_points,file="pop_points-inclusion_not_forced-soft_border.csv")
population_points<-read_csv("points_for_populations.csv",show_col_types = FALSE)
results<-read_csv("sampling_same_pop.csv",show_col_types = FALSE)
results_long<-results%>%
pivot_longer(cols = HH:Truth,
names_to = "Estimator",
values_to = "Value")
ggplot(results_long,aes(x=Value, y=Estimator, fill=Estimator))+
geom_density_ridges(alpha=0.6, stat="binline",bins=20,scale=1)+
theme_ridges()+
theme(legend.position="none",
axis.title.y = element_text( hjust = 0.5),
axis.title.x = element_text( hjust = 0.5))+
xlab("Estimate") +
ylab("Frequency")+
ggtitle("Are adaptive cluster sampling estimators reliable?")+
scale_fill_manual(values=c("lightblue3","lightblue3","red3"))+
facet_wrap(~Population)
ggplot(population_points,aes(x=X,y=Y,color=Group))+
geom_point()+
facet_wrap(~Population)+
xlim(0,20)+ylim(0,20)+
ggtitle("How do these estimators vary across populations?")
set.seed(pi)
n_samples<-1000
n_pops<-9
results<-data.frame(HH=rep(NA,n_pops*n_samples),
TH=rep(NA,n_pops*n_samples),
Truth=rep(NA,n_pops*n_samples),
Population=rep(NA,n_pops*n_samples))
population_points<-data.frame(X=c(),Y=c(),Group=c(),Population=c())
for(i in 1:n_pops){
sim_data<-simulate_m(m=n_samples,hard_border = FALSE, force_inclusion = FALSE)
# save the population points to plot later
population_points<-population_points%>%
rbind( cbind(sim_data[[i]]$points,Population=paste("pop",i)) )
for(j in 1:n_samples){
results$HH[(i-1)*n_samples+j]<-modified_HH(sim_data[[j]])
results$TH[(i-1)*n_samples+j]<-modified_TH(sim_data[[j]])
results$Truth[(i-1)*n_samples+j]<-length(sim_data[[j]]$points$X)/(sim_data[[j]]$grid_size^2)
results$Population[(i-1)*n_samples+j]<-paste("Population",i)
}
}
population_points
write.csv(results,file="estimates-inclusion_not_forced-soft_border.csv.csv")
write.csv(population_points,file="pop_points-inclusion_not_forced-soft_border.csv")
set.seed(pi)
n_samples<-1000
n_pops<-9
# Create blank dataframes for the estimates and the populations of points
results<-data.frame(HH=rep(NA,n_pops*n_samples),
TH=rep(NA,n_pops*n_samples),
Truth=rep(NA,n_pops*n_samples),
Population=rep(NA,n_pops*n_samples))
population_points<-data.frame(X=c(),Y=c(),Group=c(),Population=c())
for(i in 1:n_pops){
sim_data<-simulate_m(m=n_samples,hard_border = TRUE, force_inclusion = FALSE)
# save the population points to plot later
population_points<-population_points%>%
rbind( cbind(sim_data[[i]]$points,Population=paste("pop",i)) )
for(j in 1:n_samples){
# saving estimators into results
results$HH[(i-1)*n_samples+j]<-modified_HH(sim_data[[j]])
results$TH[(i-1)*n_samples+j]<-modified_TH(sim_data[[j]])
results$Truth[(i-1)*n_samples+j]<-length(sim_data[[j]]$points$X)/(sim_data[[j]]$grid_size^2)
results$Population[(i-1)*n_samples+j]<-paste("Population",i)
}
}
# save end results of simulation
write.csv(results,file="estimates-inclusion_not_forced-hard_border.csv")
write.csv(population_points,file="pop_points-inclusion_not_forced-hard_border.csv")
# read in results from simulation above
results<-read_csv("estimates-inclusion_not_forced-hard_border.csv",show_col_types = FALSE)
results_long<-results%>%
pivot_longer(cols = HH:Truth,
names_to = "Estimator",
values_to = "Value")
population_points<-read_csv("pop_points-inclusion_not_forced-hard_border.csv",show_col_types = FALSE)
# plot the distributions of the estimators across the 9 populations
ggplot(results_long,aes(x=Value, y=Estimator, fill=Estimator))+
geom_density_ridges(alpha=0.6, stat="binline",bins=20,scale=1)+
theme_ridges()+
theme(legend.position="none",
axis.title.y = element_text( hjust = 0.5),
axis.title.x = element_text( hjust = 0.5))+
xlab("Estimate") +
ylab("Frequency")+
ggtitle("Are adaptive cluster sampling estimators reliable?",
subtitle="Inclusion not forced, hard border finding neighbours")+
scale_fill_manual(values=c("lightblue3","lightblue3","red3"))+
facet_wrap(~Population)
# plot the 9 populations
ggplot(population_points,aes(x=X,y=Y,color=Group))+
geom_point()+
facet_wrap(~Population)+
xlim(0,20)+ylim(0,20)+
ggtitle("How do these estimators vary across populations?",
subtitle="Inclusion not forced, hard border finding neighbours")
set.seed(pi)
n_samples<-1000
n_pops<-9
# Create blank dataframes for the estimates and the populations of points
results<-data.frame(HH=rep(NA,n_pops*n_samples),
TH=rep(NA,n_pops*n_samples),
Truth=rep(NA,n_pops*n_samples),
Population=rep(NA,n_pops*n_samples))
population_points<-data.frame(X=c(),Y=c(),Group=c(),Population=c())
for(i in 1:n_pops){
sim_data<-simulate_m(m=n_samples,hard_border = TRUE, force_inclusion = FALSE)
# save the population points to plot later
population_points<-population_points%>%
rbind( cbind(sim_data[[i]]$points,Population=paste("pop",i)) )
for(j in 1:n_samples){
# saving estimators into results
results$HH[(i-1)*n_samples+j]<-modified_HH(sim_data[[j]])
results$TH[(i-1)*n_samples+j]<-modified_TH(sim_data[[j]])
results$Truth[(i-1)*n_samples+j]<-length(sim_data[[j]]$points$X)/(sim_data[[j]]$grid_size^2)
results$Population[(i-1)*n_samples+j]<-paste("Population",i)
}
}
# save end results of simulation
write.csv(results,file="estimates-inclusion_not_forced-hard_border.csv")
write.csv(population_points,file="pop_points-inclusion_not_forced-hard_border.csv")
set.seed(pi)
n_samples<-1000
n_pops<-9
# estimator results
results<-data.frame(HH=rep(NA,n_pops*n_samples),
TH=rep(NA,n_pops*n_samples),
Truth=rep(NA,n_pops*n_samples),
Population=rep(NA,n_pops*n_samples))
# saving the population sampled from
population_points<-data.frame(X=c(),Y=c(),Group=c(),Population=c())
for(i in 1:n_pops){ # generating the populations and samples
sim_data<-simulate_m(m=n_samples,hard_border = FALSE, force_inclusion = FALSE)
# save the population points to plot later
population_points<-population_points%>%
rbind( cbind(sim_data[[i]]$points,Population=paste("pop",i)) )
for(j in 1:n_samples){
# save estimates for each sample
results$HH[(i-1)*n_samples+j]<-modified_HH(sim_data[[j]])
results$TH[(i-1)*n_samples+j]<-modified_TH(sim_data[[j]])
results$Truth[(i-1)*n_samples+j]<-length(sim_data[[j]]$points$X)/(sim_data[[j]]$grid_size^2)
results$Population[(i-1)*n_samples+j]<-paste("Population",i)
}
}
# save estimates of the samples and the populations sampled from
write.csv(results,file="estimates-inclusion_not_forced-soft_border.csv")
write.csv(population_points,file="pop_points-inclusion_not_forced-soft_border.csv")
set.seed(pi)
n_samples<-1000
n_pops<-9
# Create blank dataframes for the estimates and the populations of points
results<-data.frame(HH=rep(NA,n_pops*n_samples),
TH=rep(NA,n_pops*n_samples),
Truth=rep(NA,n_pops*n_samples),
Population=rep(NA,n_pops*n_samples))
population_points<-data.frame(X=c(),Y=c(),Group=c(),Population=c())
for(i in 1:n_pops){
sim_data<-simulate_m(m=n_samples,hard_border = TRUE, force_inclusion = TRUE)
# save the population points to plot later
population_points<-population_points%>%
rbind( cbind(sim_data[[i]]$points,Population=paste("pop",i)) )
for(j in 1:n_samples){
# saving estimators into results
results$HH[(i-1)*n_samples+j]<-modified_HH(sim_data[[j]])
results$TH[(i-1)*n_samples+j]<-modified_TH(sim_data[[j]])
results$Truth[(i-1)*n_samples+j]<-length(sim_data[[j]]$points$X)/(sim_data[[j]]$grid_size^2)
results$Population[(i-1)*n_samples+j]<-paste("Population",i)
}
}
# save end results of simulation
write.csv(results,file="estimates-inclusion_forced-hard_border.csv")
write.csv(population_points,file="pop_points-inclusion_forced-hard_border.csv")
set.seed(pi)
n_samples<-1000
n_pops<-9
# Create blank dataframes for the estimates and the populations of points
results<-data.frame(HH=rep(NA,n_pops*n_samples),
TH=rep(NA,n_pops*n_samples),
Truth=rep(NA,n_pops*n_samples),
Population=rep(NA,n_pops*n_samples))
population_points<-data.frame(X=c(),Y=c(),Group=c(),Population=c())
for(i in 1:n_pops){
sim_data<-simulate_m(m=n_samples,hard_border = FALSE, force_inclusion = TRUE)
# save the population points to plot later
population_points<-population_points%>%
rbind( cbind(sim_data[[i]]$points,Population=paste("pop",i)) )
for(j in 1:n_samples){
# saving estimators into results
results$HH[(i-1)*n_samples+j]<-modified_HH(sim_data[[j]])
results$TH[(i-1)*n_samples+j]<-modified_TH(sim_data[[j]])
results$Truth[(i-1)*n_samples+j]<-length(sim_data[[j]]$points$X)/(sim_data[[j]]$grid_size^2)
results$Population[(i-1)*n_samples+j]<-paste("Population",i)
}
}
# save end results of simulation
write.csv(results,file="estimates-inclusion_forced-soft_border.csv")
write.csv(population_points,file="pop_points-inclusion_forced-soft_border.csv")
n_sim<-1000
results<-data.frame(HH=rep(NA,n_sim),
TH=rep(NA,n_sim),
Truth=rep(NA,n_sim))
for(i in 1:n_sim){
sim_data<-simulate_one()
results$HH[i]<-modified_HH(sim_data)
results$TH[i]<-modified_TH(sim_data)
results$Truth[i]<-length(sim_data$points$X)/(sim_data$grid_size^2)
}
write.csv(results,file="sampling 1000 populations.csv")
results<-read_csv("sampling 1000 populations.csv",show_col_types = FALSE)
results_long<-results %>%
pivot_longer(cols = HH:Truth,
names_to = "Estimator",
values_to = "Value")
# install.packages("ggridges")
require(ggridges)
# install.packages("colorspace")
require(colorspace)
ggplot(results_long,aes(x=Value, y=Estimator, fill=Estimator))+
geom_density_ridges(alpha=0.6, stat="binline",bins=20,scale=1)+
theme_ridges()+
theme(legend.position="none",
axis.title.y = element_text( hjust = 0.5),
axis.title.x = element_text( hjust = 0.5))+
xlab("Estimate") +
ylab("Frequency")+
ggtitle("Are adaptive cluster sampling estimators reliable?")+
scale_fill_manual(values=c("lightblue3","lightblue3","red3"))
print("whoopy")
print("whoopy")
